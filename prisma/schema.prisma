//
//
// Copyright 2024 Anton Kuzmin (https://github.com/antonkuzmn1)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now()) @db.Timestamp(0)
  updated DateTime @updatedAt @db.Timestamp()
  deleted Int      @default(0) @db.TinyInt()

  username String @unique @db.VarChar(30)
  password String @db.VarChar(60)

  fullname String @default("") @db.VarChar(100)
  title    String @default("") @db.VarChar(255)
  admin    Int    @default(0) @db.TinyInt()
  disabled Int    @default(0) @db.TinyInt()

  accountGroups AccountGroup[]

  logsInitiated Log[] @relation("initiator")

  logs Log[] @relation("account")
}

model Group {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now()) @db.Timestamp(0)
  updated DateTime @updatedAt @db.Timestamp()
  deleted Int      @default(0) @db.TinyInt()

  name  String @default("") @db.VarChar(100)
  title String @default("") @db.VarChar(255)

  accessRouters Int @default(0) @db.TinyInt()
  accessUsers   Int @default(0) @db.TinyInt()

  accountGroups     AccountGroup[]
  routerGroupViewer RouterGroupViewer[]
  routerGroupEditor RouterGroupEditor[]

  log Log[]
}

model AccountGroup {
  accountId Int
  groupId   Int

  account Account @relation(fields: [accountId], references: [id])
  group   Group   @relation(fields: [groupId], references: [id])

  @@id([accountId, groupId])
}

model Router {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now()) @db.Timestamp(0)
  updated DateTime @updatedAt @db.Timestamp()
  deleted Int      @default(0) @db.TinyInt()

  login         String @default("") @db.VarChar(100)
  password      String @default("") @db.VarChar(100)
  localAddress  String @default("") @db.VarChar(15)
  remoteAddress String @default("") @db.VarChar(15)
  name          String @default("") @db.VarChar(100)
  title         String @default("") @db.VarChar(255)
  disabled      Int    @default(0) @db.TinyInt()

  certificate Bytes?
  l2tpKey     String @default("") @db.VarChar(100)

  vpns              Vpn[]
  routerGroupViewer RouterGroupViewer[]
  routerGroupEditor RouterGroupEditor[]

  logs Log[]
}

model RouterGroupViewer {
  routerId Int
  groupId  Int

  router Router @relation(fields: [routerId], references: [id])
  group  Group  @relation(fields: [groupId], references: [id])

  @@id([routerId, groupId])
}

model RouterGroupEditor {
  routerId Int
  groupId  Int

  router Router @relation(fields: [routerId], references: [id])
  group  Group  @relation(fields: [groupId], references: [id])

  @@id([routerId, groupId])
}

model Vpn {
  id      String
  created DateTime @default(now()) @db.Timestamp(0)
  updated DateTime @updatedAt @db.Timestamp()
  deleted Int      @default(0) @db.TinyInt()

  name          String @default("") @db.VarChar(100)
  password      String @default("") @db.VarChar(100)
  profile       String @default("") @db.VarChar(50)
  service       String @default("") @db.VarChar(10)
  remoteAddress String @default("") @db.VarChar(15)
  title         String @default("") @db.VarChar(255)
  disabled      Int    @default(0) @db.TinyInt()

  routerId Int
  userId   Int?

  router Router @relation(fields: [routerId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  logs Log[]

  @@id([id, routerId])
}

model User {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now()) @db.Timestamp(0)
  updated DateTime @updatedAt @db.Timestamp()
  deleted Int      @default(0) @db.TinyInt()

  name       String @default("") @db.VarChar(50)
  surname    String @default("") @db.VarChar(50)
  patronymic String @default("") @db.VarChar(50)
  fullname   String @default("") @db.VarChar(150)
  department String @default("") @db.VarChar(100)
  title      String @default("") @db.VarChar(100)
  login      String @default("") @db.VarChar(50)
  password   String @default("") @db.VarChar(50)
  disabled   Int    @default(0) @db.TinyInt()

  vpns Vpn[]

  logs Log[]
}

model Log {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now()) @db.Timestamp(0)

  action   String @db.VarChar(50)
  newValue Json?

  initiatorId Int

  accountId   Int?
  groupId     Int?
  routerId    Int?
  vpnId       String?
  vpnRouterId Int?
  userId      Int?

  initiator Account @relation("initiator", fields: [initiatorId], references: [id])

  account Account? @relation("account", fields: [accountId], references: [id])
  group   Group?   @relation(fields: [groupId], references: [id])
  router  Router?  @relation(fields: [routerId], references: [id])
  vpn     Vpn?     @relation(fields: [vpnId, routerId], references: [id, routerId])
  user    User?    @relation(fields: [userId], references: [id])
}
